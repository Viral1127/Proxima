@model List<Proxima.Models.TaskModel>

@{
    ViewBag.Title = "Task List";
}

<div class="task-section">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h5 class="font-weight-medium">In Progress</h5>
        <span class="mdi mdi-dots-horizontal" style="font-size: 20px;"></span>
    </div>
    
            
    <div class="">
        <ul class="">
            @foreach (var task in Model.Where(t => t.Status == "In Progress"))
            {
               <li class="list-unstyled">
                    <div style="max-width:100%; padding:8px; cursor: pointer;"
                         id="taskCard_@task.TaskID"
                         class="d-flex justify-content-between align-items-center mb-3 task-card"
                         data-task-id="@task.TaskID">

                        <label>
                            <i class="mdi mdi-circle-outline status-btn" onclick="toggleDropdown(event)"></i>
                            <span class="mdi mdi-signal-cellular-3 mx-1 text-muted"></span>
                            <span class="task-title">@task.Title</span>

                            <div class="dropdown">
                                <div class="dropdown-content">
                                    <span onclick="selectStatus('mdi mdi-progress-check', 'In Progress', @task.TaskID, event)">
                                        <i class="mdi mdi-progress-check icon"></i> In Progress
                                    </span>
                                    <span onclick="selectStatus('mdi mdi-eye-check', 'Under Review', @task.TaskID, event)">
                                        <i class="mdi mdi-eye-check icon"></i> Under Review
                                    </span>
                                    <span onclick="selectStatus('mdi mdi-check-circle', 'Completed', @task.TaskID, event)">
                                        <i class="mdi mdi-check-circle icon"></i> Completed
                                    </span>
                                </div>
                            </div>
                        </label>

                        <div class="icon-container">
                            <span class="text-muted">@task.DueDate.ToString("d MMMM")</span>
                            
							@if (User.IsInRole("Admin") || User.IsInRole("Project Manager"))
							{
                                <span class="mdi mdi-trash-can-outline text-danger mx-3 font-weight-medium delete-task"
                                      data-id="@task.TaskID" style="font-size: 15px;"></span>
							}
                            
                        </div>
                    </div>

                </li>
            }
        </ul>
    </div>
</div>

<div class="task-section">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h5 class="font-weight-medium">Under Review</h5>
        <span class="mdi mdi-dots-horizontal" style="font-size: 20px;"></span>
    </div>
    <ul>
        @foreach (var task in Model.Where(t => t.Status == "Under Review"))
        {
            <li class="list-unstyled">
                <div style="max-width:100%; padding:8px; cursor: pointer;"
                     id="taskCard_@task.TaskID"
                     class="d-flex justify-content-between align-items-center mb-3 task-card"
                     data-task-id="@task.TaskID">
                    <label>
                        <i id="statusIcon" class="mdi mdi-circle-outline status-btn" onclick="toggleDropdown(event)"></i>
                        <span class="mdi mdi-signal-cellular-3 mx-1 text-muted"></span>
                        <span>@task.Title</span>

                        <div class="dropdown">
                            <div id="statusDropdown" class="dropdown-content">
                                <span onclick="selectStatus('mdi mdi-progress-check', 'In Progress', @task.TaskID, event)">
                                    <i class="mdi mdi-progress-check icon"></i> In Progress
                                </span>
                                <span onclick="selectStatus('mdi mdi-eye-check', 'Under Review', @task.TaskID, event)">
                                    <i class="mdi mdi-eye-check icon"></i> Under Review
                                </span>
                                <span onclick="selectStatus('mdi mdi-check-circle', 'Completed', @task.TaskID, event)">
                                    <i class="mdi mdi-check-circle icon"></i> Completed
                                </span>
                            </div>
                        </div>
                    </label>
                    <div class="icon-container">
                        <span class="text-muted">@task.DueDate.ToString("d MMMM")</span>
                        @if (User.IsInRole("Admin") || User.IsInRole("Project Manager"))
                        {
                            <span class="mdi mdi-trash-can-outline text-danger mx-3 font-weight-medium delete-task"
                                  data-id="@task.TaskID" style="font-size: 15px;"></span>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

<div class="task-section">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h5 class="font-weight-medium">Completed</h5>
        <span class="mdi mdi-dots-horizontal" style="font-size: 20px;"></span>
    </div>
    <ul>
        @foreach (var task in Model.Where(t => t.Status == "Completed"))
        {
            <li class="list-unstyled">
                <div style="max-width:100%; padding:8px; cursor: pointer;"
                     id="taskCard_@task.TaskID"
                     class="d-flex justify-content-between align-items-center mb-3 task-card"
                     data-task-id="@task.TaskID">
                    <label>
                        <i id="statusIcon" class="mdi mdi-circle-outline status-btn" onclick="toggleDropdown(event)"></i>
                        <span class="mdi mdi-signal-cellular-3 mx-1 text-muted"></span>
                        <span>@task.Title</span>
                        
                        
                        <div class="dropdown">
                            <div id="statusDropdown" class="dropdown-content">
                                <span onclick="selectStatus('mdi mdi-progress-check', 'In Progress', @task.TaskID, event)">
                                    <i class="mdi mdi-progress-check icon"></i> In Progress
                                </span>
                                <span onclick="selectStatus('mdi mdi-eye-check', 'Under Review', @task.TaskID, event)">
                                    <i class="mdi mdi-eye-check icon"></i> Under Review
                                </span>
                                <span onclick="selectStatus('mdi mdi-check-circle', 'Completed', @task.TaskID, event)">
                                    <i class="mdi mdi-check-circle icon"></i> Completed
                                </span>
                            </div>
                        </div>
                    </label>
                    <div class="icon-container">
                        <span class="text-muted">@task.DueDate.ToString("d MMMM")</span>
                        @if (User.IsInRole("Admin") || User.IsInRole("Project Manager"))
                        {
                            <span class="mdi mdi-trash-can-outline text-danger mx-3 font-weight-medium delete-task"
                                  data-id="@task.TaskID" style="font-size: 15px;"></span>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

<script>

        document.addEventListener("click", function (event) {
        let taskCard = event.target.closest(".task-card");
        if (!taskCard) return; // Exit if click is outside task card

        // Excluded elements (icons, dropdowns)
        if (
            event.target.closest(".status-btn") ||
            event.target.closest(".mdi-calendar-range") ||
            event.target.closest(".delete-task") ||
            event.target.closest(".dropdown-content")
        ) {
            event.stopPropagation();
            return;
        }

        // Redirect only when clicking the task
        const taskId = taskCard.getAttribute("data-task-id");
        console.log("taskid : ",taskId);
        if (taskId) {
            window.location.href = `/Task/TaskDetails/${taskId}`;
        }
    });



    function toggleDropdown(event) {
        event.stopPropagation();
        let dropdown = event.target.closest("label").querySelector(".dropdown-content");
        $(".dropdown-content").not(dropdown).removeClass("show");
        $(dropdown).toggleClass("show");
    }

    function selectStatus(iconClass, statusText, taskID, event) {
        let statusIcon = event.target.closest("label").querySelector(".status-btn");
        $(statusIcon).attr("class", iconClass + " status-btn");

        let requestData = {
            taskID: taskID,
            status: statusText,
            updatedAt: new Date().toISOString()
        };

        $.ajax({
            url: `https://localhost:7107/api/Task/UpdateStatus/${taskID}`,
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(requestData),
            success: function(response) {
                console.log("Response:", response);
                if (response.message === "Task Status Updated succesfully") {
                    location.reload();
                }
                else{
                    alert("Failed to update task status.");
                }
            },
            error: function(xhr, status, error) {
                console.log("Error:", xhr.responseText);
                alert("Error updating task status. Check console for details.");
            }
        });
    }

    $(document).on('click', function(event) {
        if (!$(event.target).closest('.dropdown').length) {
            $(".dropdown-content").removeClass("show");
        }
    });

    $(document).on('click', '.delete-task', function () {
        let taskId = $(this).data('id');
        if (!taskId) {
            console.error("Task ID is missing");
            return;
        }

        Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, delete it!"
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `https://localhost:7107/api/Task/${taskId}`,
                    type: "DELETE",
                    success: function (response) {
                        Swal.fire("Deleted!", "Your task has been deleted.", "success");
                        $(`span[data-id="${taskId}"]`).closest("li").remove();
                    },
                    error: function (xhr, status, error) {
                        Swal.fire("Error", "Something went wrong!", "error");
                        console.error(xhr.responseText);
                    }
                });
            }
        });
    });
</script>

<style>
    .task-card:hover{
        background:white;
        border: 1px solid #d3d3d3;
        border-radius: 0;
        border-top-left-radius: 0.5rem;
        border-bottom-left-radius: 0.5rem; 
        border-top-right-radius: 0.5rem; 
        border-bottom-right-radius: 0.5rem;
    }

    /* .icon-container { */
    /*     position: relative; */
    /*     display: inline-block; */
    /* } */

    /* .icon-text { */
    /*     visibility: hidden; */
    /*     position: absolute; */
    /*     right: 100%; */
    /*     margin-right: 8px; */
    /*     color: #888; */
    /*     transition: visibility 0.3s, opacity 0.3s; */
    /*     opacity: 0; */
    /* } */

    /* .icon-container:hover .icon-text { */
    /*     visibility: visible; */
    /*     opacity: 1; */
    /* } */

    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: white;
        min-width: 180px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 5px;
        z-index: 1;
        padding: 5px;
    }

    .dropdown-content span {
        display: flex;
        align-items: center;
        padding: 8px;
        cursor: pointer;
    }

    .dropdown-content span:hover {
        background-color: #f0f0f0;
    }

    .show {
        display: block;
    }

    .icon {
        margin-right: 8px;
    }
</style>

