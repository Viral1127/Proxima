@model Proxima.Models.ProjectModel;
<div class="d-flex justify-content-center">
    <div class="tab-content mt-3 w-100">

        <div class="tab-pane fade show active" id="overview">
            <div class="d-flex align-items-center mb-4 flex-column flex-sm-row">
                <h3 class="fw-bold me-3">@Model.Title</h3>
                @if (User.IsInRole("Admin") || User.IsInRole("Project Manager")){
                    <div class="avatar-container">
                        <div class="avatar main-avatar">
                            <span>V</span>
                        </div>
                        <div class="avatar plus-avatar" id="assignButton" data-bs-toggle="modal" data-bs-target="#assignModal">
                            <span>+</span>
                        </div>
                    </div>
                }
                
               @*  <div class="d-flex justify-content-center align-items-center">
                    <div id="projectCircle" class="rounded-circle bg-warning text-white d-flex justify-content-center align-items-center" style="width: 40px; height: 40px;">P</div>
                    @if (User.IsInRole("Admin") || User.IsInRole("Project Manageer"))
                    { 
                    <button class="btn btn-primary ms-3" id="assignButton" style="display:none;" data-bs-toggle="modal" data-bs-target="#assignModal">Assign People</button>
                    }
                </div> *@
            </div>

            <div class="modal fade" id="assignModal" tabindex="-1" aria-labelledby="assignModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h6>Add member to @Model.Title project.</h6>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="height:5px;width:5px;"></button>
                                </div>
                                <input type="text" id="searchUser" class="form-control mb-3" placeholder="Search for users">
                                <ul class="list-group" id="userList">
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-0 border rounded shadow-sm bg-white p-3">
                <div class="col-12 col-sm-4 d-flex align-items-center justify-content-center border-end mb-3 mb-sm-0">
                    <div class="d-flex align-items-center">
                        <div class="bg-light rounded p-2 me-2">
                            <img src="https://img.icons8.com/fluency/48/ok.png" alt="Completed" width="24">
                        </div>
                        <div>
                            <div class="text-muted">Completed tasks</div>
                            <div class="fw-bold fs-5" id="completedTasks">0</div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-4 d-flex align-items-center justify-content-center border-end mb-3 mb-sm-0">
                    <div class="d-flex align-items-center">
                        <div class="bg-light rounded p-2 me-2">
                            <img src="https://img.icons8.com/color/48/folder-invoices--v1.png" alt="Incomplete" width="24">
                        </div>
                        <div>
                            <div class="text-muted">Incomplete tasks</div>
                            <div class="fw-bold fs-5" id="incompleteTasks">2</div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-4 d-flex align-items-center justify-content-center">
                    <div class="d-flex align-items-center">
                        <div class="bg-light rounded p-2 me-2">
                            <img src="https://img.icons8.com/color/48/high-priority.png" alt="Overdue" width="24">
                        </div>
                        <div>
                            <div class="text-muted">Overdue tasks</div>
                            <div class="fw-bold fs-5" id="overdueTasks">0</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="border rounded shadow-sm bg-white p-3 pb-5 my-3" style="height:50vh;">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="m-0">Task-logs</h6>
                    <div class="dropdown">
                        <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" id="filterDropdown">
                            Last 30 days
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item filter-option" data-days="30" href="#">Last 30 days</a></li>
                            <li><a class="dropdown-item filter-option" data-days="7" href="#">Last 7 days</a></li> 
                            <li><a class="dropdown-item filter-option" data-days="month" href="#">This month</a></li>
                        </ul>
                    </div>
                </div>

                <!-- Bar Chart Canvas -->
                <canvas id="taskChart"></canvas>
            </div>

            <div class="border rounded shadow-sm bg-white p-3">
                <h6>Milestones</h6>
                <div class="d-flex align-items-center mt-2">
                    <div id="milestoneList">
                        <span>aaaaa</span>
                        <span class="text-muted" id="milestoneCount">(0/1)</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="tasks">Tasks Content</div>
        <div class="tab-pane fade" id="milestones">Milestones Content</div>
        <div class="tab-pane fade" id="files">Files Content</div>
        <div class="tab-pane fade" id="messages">Messages Content</div>
    </div>
</div>


<style>
    .avatar-container {
        position: relative;
        display: inline-block;
    }

    .avatar {
        width: 30px;
        height: 30px;
        display: inline-block;
        border-radius: 50%;
        text-align: center;
        line-height: 30px;
        background-color: #f97316;
        color: white;
        font-size: 12px;
        position: relative;
        /* transition: transform 0.3s ease-in-out; */
    }

    .plus-avatar {
        position: absolute;
        top: 0;
        left: 29px; /* Adjust overlap */
        background-color: lightgray;
        color: white;
        cursor: pointer;
        visibility: hidden;
        opacity: 0;
        /* transition: visibility 0s linear 0.3s, opacity 0.3s; */
    }

    .avatar-container:hover .plus-avatar {
        visibility: visible;
        opacity: 1;
        transform: translateX(-10px); /* Move on hover */
    }
    #projectCircle:hover {
        cursor: pointer;
    }

    #assignButton:hover {
        display: block !important;
    }

</style>

<script>
    $('#projectCircle').hover(function () {
        $('#assignButton').show();
    }, function () {
        $('#assignButton').show();
    });

    $(document).ready(function () {
        var projectID = @Model.ProjectID;

        function fetchUsers() {
            $.ajax({
                url: `https://localhost:7107/api/User/GetAllUsers`,
                type: "GET",
                dataType: "json",
                success: function (data) {
                    console.log("Users Data:", data);

                    var userList = $("#userList");
                    userList.empty();

                    data.forEach(function (user) {
                        var userHtml = `
                           <li class="list-group-item">
                            <div class="form-check">
                                <input class="form-check-input user-checkbox" type="checkbox" id="user-${user.userID}" data-user-id="${user.userID}" />
                                <label class="form-check-label" for="user-${user.userID}">
                                    ${user.name}
                                </label>
                            </div>
                        </li>`;
                        userList.append(userHtml);
                    });
                     loadAssignedUsers();
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching users:", error);
                }
            });
        }

        function loadAssignedUsers() {
        $.ajax({
            url: `https://localhost:7107/api/ProjectAssignments/${projectID}`,
            type: 'GET',
            data: { projectID: projectID },
            dataType: 'json',
            success: function (assignedUsers) {
                assignedUsers.forEach(user => {
                    $(`#user-${user.userID}`).prop('checked', true);
                });
            },
            error: function () {
                alert('Error fetching assigned users.');
            }
        });
    }

        function assignUserToProject(userID) {
        $.ajax({
            url: 'https://localhost:7107/api/ProjectAssignments',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ projectID: projectID, userID: userID }),
            error: function (xhr, status, error) {
                    console.error("Failed to asssign user:", error);
                }
        });
    }

        function removeUserFromProject(userID) {
        $.ajax({
            url: 'https://localhost:7107/api/ProjectAssignments/removeUserFromProject',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ projectID: projectID, userID: userID }),
            error: function (xhr, status, error) {
                    console.error("Failed to asssign user:", error);
            }
        });
    }
        $(document).on('change', '.user-checkbox', function () {
        const userID = $(this).data('user-id');
        if ($(this).is(':checked')) {
            assignUserToProject(userID);
        } else {
            removeUserFromProject(userID);
        }
    });
        $('#assignModal').on('shown.bs.modal', function () {
            fetchUsers();
        });

        $('#userList').on('change', '.userCheckbox', function () {
            var userFirstLetter = $(this).data('first-letter');
            var isChecked = $(this).prop('checked');

            if (isChecked) {
                $('#projectCircle').text(userFirstLetter);
            } else {
                $('#projectCircle').text('P');
            }
        });

        $('#searchUser').on('input', function () {
            var searchTerm = $(this).val().toLowerCase();

            $('#userList .list-group-item').each(function () {
                var userName = $(this).text().toLowerCase();
                if (userName.indexOf(searchTerm) === -1) {
                    $(this).hide();
                } else {
                    $(this).show();
                }
            });
        });

        function fetchTaskCounts() {
            $.ajax({
                url: `https://localhost:7107/api/Project/TaskCounts/${projectID}`,
                type: "GET",
                dataType: "json",
                success: function (data) {
                    console.log("Task Data:", data);

                    $("#completedTasks").text(data.completedTasks);
                    $("#incompleteTasks").text(data.incompleteTasks);
                    $("#overdueTasks").text(data.overdueTasks);
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching tasks:", error);
                    console.log("XHR:", xhr);
                    console.log("Status:", status);
                }
            });
        }

        function fetchMilestones() {
            $.ajax({
                url: `https://localhost:7107/api/Milestones/MilestonesByProjectID/${projectID}`,
                type: "GET",
                dataType: "json",
                success: function (data) {
                    console.log("Milestone Data:", data);

                    var milestoneContainer = $("#milestoneList");
                    milestoneContainer.empty();

                    var totalMilestones = data.length;
                    var achievedMilestones = data.filter(m => m.status === "Achieved").length;

                    $("#milestoneCount").text(`(${achievedMilestones}/${totalMilestones})`);

                    if (data.length === 0) {
                        milestoneContainer.append("<p class='text-muted'>No milestones found.</p>");
                    } else {
                        data.forEach(function (milestone) {
                            var isAchieved = milestone.status === "Achieved";

                            var milestoneHtml = `
                                <div class="d-flex align-items-center mt-2">
                                    <div class="p-2">
                                        <span class="${isAchieved ? 'text-success' : 'text-muted'}" style="font-size: 20px;">
                                            ${isAchieved ? '●' : '○'}
                                        </span>
                                    </div>
                                    <div>
                                        <span>${milestone.title}</span>
                                        <span>(${achievedMilestones}/${totalMilestones})</span>
                                    </div>
                                </div>
                            `;
                            milestoneContainer.append(milestoneHtml);
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching milestones:", error);
                    $("#milestoneList").html("<p class='text-danger'>Failed to load milestones.</p>");
                }
            });
        }
        fetchTaskCounts();
        fetchMilestones();

        fetchChartData(30, projectID); // Load default data for Last 7 Days

        $(".filter-option").click(function (event) {
        event.preventDefault();
        let days = $(this).data("days");
        $("#filterDropdown").text($(this).text());
        console.log("Filtering for:", days, "Project ID:", projectID);
        fetchChartData(days, projectID);
    });


    });

	

    function fetchChartData(filter, projectID) {
        $.ajax({
            url: `https://localhost:7107/api/Task/TaskCountByDate/${filter}/${projectID}`, // API with filter & projectID
            type: "GET",
            dataType: "json",
            success: function (response) {
                console.log("API Response:", response);
                const labels = response.map(item => item.taskDate);
                const taskCounts = response.map(item => item.taskCount);
                renderChart(labels, taskCounts);
            },
            error: function (xhr, status, error) {
                console.error("Error fetching data:", error);
            }
        });
    }

    function renderChart(labels, data) {
        let taskChart = null;
        const ctx = document.getElementById("taskChart").getContext("2d");
            
        if (taskChart) {
            taskChart.destroy(); // Destroy previous chart instance
        }

       var gradientStrokeViolet = ctx.createLinearGradient(0, 0, 0, 181);
            gradientStrokeViolet.addColorStop(0, 'rgba(218, 140, 255, 1)');
            gradientStrokeViolet.addColorStop(1, 'rgba(154, 85, 255, 1)');
            var gradientLegendViolet = 'linear-gradient(to right, rgba(218, 140, 255, 1), rgba(154, 85, 255, 1))';

            const bgColor1 = ["rgba(218, 140, 255, 1)"];

        taskChart = new Chart(ctx, {
            type: "bar",
            data: {
                labels: labels,
                datasets: [{
                    label: "Task Count",
                    borderColor: gradientStrokeViolet,
                    backgroundColor: gradientStrokeViolet,
                    fillColor: bgColor1,
                    hoverBackgroundColor: gradientStrokeViolet,
                    borderWidth: 1,
                    data: data,
                    barPercentage: 0.5,
                    categoryPercentage: 0.5
                }]
            },
            options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    elements: {
                        line: {
                            tension: 0.4,
                        },
                    },
                    scales: {
                        y: {
                            display: false,
                            grid: {
                                display: true,
                                drawOnChartArea: true,
                                drawTicks: false,
                            },
                        },
                        x: {
                            display: true,
                            grid: {
                                display: false,
                            },
                        }
                    },
                    plugins: {
                        legend: {
                            display: false,
                        }
                    }
                },
        });
    }
</script>
