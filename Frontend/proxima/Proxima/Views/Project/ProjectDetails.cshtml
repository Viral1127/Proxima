
@* @model Proxima.Models.ProjectModel
@{
    ViewBag.Title = "Project Details";
}
<div style="background: #f8f9fe; padding: 1rem; width: 100%; -webkit-flex-grow: 1; flex-grow: 1;">
    @Html.Partial("_ProjectTabs")

    <!-- Overview Tab -->
    <div class="tab-pane fade show active" id="overview">
        @Html.Partial("_ProjectOverview", Model)
    </div>
</div>
 *@
 @model Proxima.Models.ProjectDetailsViewModel

<div class="content-wrapper">
    <div class="d-flex justify-content-between align-items-center flex-wrap">
        <div class="d-flex align-items-center flex-wrap">
            <i class="mdi mdi-chevron-left mt-1 cursor-pointer" style="font-size:20px;"></i>
            <ul class="nav nav-tabs" id="projectTabs" style="flex-wrap: wrap;">
                <li class="nav-item">
                    <a class="nav-link active text-dark" data-view="ProjectOverview">Overview</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-dark" data-view="ProjectTasks">Tasks</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-dark" data-view="ProjectMilestones">Milestones</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-dark" data-view="ProjectFiles">Files</a>
                </li>
            </ul>
			@if (User.IsInRole("Admin") || User.IsInRole("Project Manager"))
			{
                <div class="dropdown">
                    <a class="text-dark mdi mdi-dots-horizontal ms-4"
                       style="font-size: 20px;"
                       id="actionIcon"
                       data-bs-toggle="dropdown"
                       aria-expanded="false">
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="actionIcon">
                        <li>
                            <a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#projectEditModal">
                                <i class="mdi mdi-progress-check"></i> Edit
                            </a>
                        </li>
                        <li>
                            <a class="dropdown-item archive text-danger" href="javascript:void(0);" onclick="archiveProject('@Model.Project.ProjectID')">
                                <i class="mdi mdi-eye-check"></i> Archive
                            </a>
                        </li>
                    </ul>
                </div>
			}
            
            
        </div>
		@if (User.IsInRole("Admin") || User.IsInRole("Project Manager"))
		{
            <button type="button" id="actionButton" class="mt-2 d-none btn btn-gradient-primary btn-rounded btn-fw">Action</button>
		}
        
    </div>

    <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="card">
                    <div class="card-body">
                        <form class="forms-sample" id="addTaskForm">
                            <input type="hidden" id="projectID" value="@Model.Project.ProjectID" />
                            <div class="mb-2">
                                <input type="text" class="form-control" id="taskTitle" name="Title" placeholder="Title">
                            </div>
                            <div class="mb-2">
                                <textarea placeholder="Add Description...." id="taskDescription" name="Description" class="form-control"></textarea>
                            </div>

                            <div class="mb-2">
                                <input type="text" onclick="(this.type='date')"
                                       onblur="(this.type='text')" class="form-control" id="dueDate" name="DueDate" placeholder="Select Due date">
                            </div>
                            <div class="mb-2">
                                <select class="form-select" id="userDropdown" name="AssignedTo">
                                    <option disabled selected>Select Users</option>
                                </select>
                            </div>
                            <div class="mb-2">
                                <select class="form-select" id="taskTypeDropdown" name="TypeName">
                                    <option disabled selected>Select Task Type</option>
                                </select>
                            </div>
                            <button type="submit" class="btn btn-gradient-primary me-2" id="saveTask">Submit</button>
                            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="milestoneModal" tabindex="-1" aria-labelledby="createMilestoneModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Create Milestone</h4>
                        <form class="forms-sample" id="milestoneForm">
                            <div class="form-group">
                                <label for="exampleInputUsername1">Title</label>
                                <input type="text" class="form-control" id="milestoneTitle" name="Title" placeholder="Title">
                            </div>
                            <input type="date" class="form-control" id="milestoneDueDate" name="DueDate" placeholder="Select Due date">
                            <input type="hidden" id="projectID" value="@Model.Project.ProjectID" />
                            <button type="submit" class="btn btn-gradient-primary me-2" id="saveMilestone">Submit</button>
                            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="projectEditModal" tabindex="-1" aria-labelledby="projectEditModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Edit Project</h4>
                        <hr />
                        <form class="forms-sample" id="projectEditForm">
                            <div class="form-group">
                                <label for="exampleInputUsername1">Project Name</label>
                                <input type="text" class="form-control" id="projectName" name="Title" placeholder="Title">
                            </div>
                            <div class="form-group">
                                <label for="description">Description:</label>
                                <textarea class="form-control" id="description" name="description" placeholder="Descroption..."></textarea>
                            </div>

                            <div class="form-group">
                                <label for="status" class="form-label">Status:</label>
                                <select class="form-select form-control" id="projectStatusDropdown" name="status">
                                    <option disabled>Select Status</option>
                                    <option value="Ongoing">Ongoing</option>
                                    <option value="Completed">Completed</option>
                                    <option value="Upcoming">Upcoming</option>
                                    <option value="Archived">Archived</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-12 col-md-6">
                                        <label for="startDate">Start Date:</label>
                                        <input type="date" class="form-control" id="startDate" name="startDate">
                                    </div>
                                    <div class="col-12 col-md-6">
                                        <label for="endDate">End Date:</label>
                                        <input type="date" class="form-control" id="endDate" name="endDate">
                                    </div>
                                </div>
                            </div>

                            <input type="hidden" id="projectID" value="@Model.Project.ProjectID" />
                            <button type="submit" class="btn btn-gradient-primary me-2" id="saveProjectAddEdit">Submit</button>
                            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <input type="file" id="fileInput" class="d-none" multiple accept="image/*, .pdf, .doc, .docx, .txt">
    <div id="partialContainer" class="mt-3"></div>
</div>



<script>
    $(document).on("click", ".mdi-chevron-left", function () {
        window.history.back(); // Go back to the previous page
    });
        document.addEventListener("DOMContentLoaded", function () {
        const actionIcon = document.getElementById("actionIcon");
        const statusDropdown = document.getElementById("statusDropdown");
        const actionButton = document.getElementById("actionButton");
        const fileInput = document.getElementById("fileInput");
        const projectId = @Model.Project.ProjectID;
        const uploadedBy = @User.FindFirst("UserID")?.Value;

            function updateActionButton(selectedView) {
        if (!actionButton) return;

        if (["ProjectOverview", "ProjectMessages"].includes(selectedView)) {
            actionButton.classList.add("d-none");
        } else {
            actionButton.classList.remove("d-none");

            const buttonConfig = {
                ProjectTasks: { text: "+ Add Task", target: "#taskModal" },
                ProjectMilestones: { text: "+ Create", target: "#milestoneModal" },
                ProjectFiles: { text: "+ Add Files", target: null },
            };

            if (buttonConfig[selectedView]) {
                actionButton.textContent = buttonConfig[selectedView].text;

                if (buttonConfig[selectedView].target) {
                    actionButton.setAttribute("data-bs-toggle", "modal");
                    actionButton.setAttribute("data-bs-target", buttonConfig[selectedView].target);
                    actionButton.onclick = null; // Remove the onclick event if not in ProjectFiles view
                } else {
                    actionButton.removeAttribute("data-bs-toggle");
                    actionButton.removeAttribute("data-bs-target");

                    // Set the onclick event only for the ProjectFiles view
                    if (selectedView === "ProjectFiles") {
                        actionButton.onclick = () => fileInput.click();
                    } else {
                        actionButton.onclick = null; // Remove the onclick event for other views
                    }
                }
            }
        }
    }

    $("#fileInput").change(function () {
        let file = this.files[0];

        if (!file) {
            Swal.fire({
                icon: 'warning',
                title: 'No File Selected',
                text: 'Please select a file before uploading.'
            });
            return;
        }

        let formData = new FormData();
        formData.append("file", file);
        formData.append("ProjectID", projectId);
        formData.append("UploadedBy", uploadedBy); // Ensure 'uploadedBy' is correctly assigned

        $.ajax({
            url: `https://localhost:7107/api/ProjectAttachment/upload?projectId=${projectId}&uploadedBy=${uploadedBy}`,
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                console.log("File Uploaded:", response);
                if (response.filePath) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Upload Successful',
                        text: 'File uploaded successfully!',
                        confirmButtonText: 'OK'
                    }).then(() => {
                    location.reload();
                });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Upload Failed',
                        text: 'File upload failed. Please try again.'
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error("Error uploading file:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Upload Error',
                    text: 'An error occurred while uploading the file. Please try again.'
                });
            }
        });
    });


        document.querySelectorAll("#projectTabs .nav-link").forEach(tab => {
            tab.addEventListener("click", function () {
                document.querySelectorAll("#projectTabs .nav-link").forEach(t => t.classList.remove("active"));
                this.classList.add("active");

                const selectedView = this.getAttribute("data-view");
                updateActionButton(selectedView);
                loadPartial(selectedView);
                sessionStorage.setItem("activeTab", selectedView);
            });
        });

        function loadPartial(viewName) {
            $("#partialContainer").load(`/Project/${viewName}?id=${projectId}`, function () {
                if (dropdownVisible) {
                    statusDropdown.classList.add("show");
                }
            });
        }

        const activeTab = sessionStorage.getItem("activeTab") || "ProjectOverview";

        document.querySelectorAll("#projectTabs .nav-link").forEach(tab => {
            tab.classList.remove("active");
        });

        const activeTabElement = document.querySelector(`.nav-link[data-view='${activeTab}']`);
        if (activeTabElement) {
            activeTabElement.classList.add("active");
            updateActionButton(activeTab);
            loadPartial(activeTab);
        }


        function fetchDropdownData(url, dropdownId, placeholder, idKey, textKey) {
            $.ajax({
                url: url,
                type: "GET",
                dataType: "json",
                success: function (data) {
                    let dropdown = $(dropdownId);
                    dropdown.empty().append(`<option disabled selected>${placeholder}</option>`);

                    $.each(data, function (index, item) {
                        if (item?.[idKey] && item?.[textKey]) {
                            dropdown.append(`<option value="${item[idKey]}">${item[textKey]}</option>`);
                        }
                    });
                },
                error: function (error) {
                    console.error(`Error fetching data from ${url}:`, error);
                }
            });
        }

        fetchDropdownData("https://localhost:7107/api/User/GetAllUsers", "#userDropdown", "Select Users", "userID", "name");
        fetchDropdownData("https://localhost:7107/api/TaskType", "#taskTypeDropdown", "Select Task Type", "taskTypeID", "typeName");

        $("#addTaskForm").submit(function (event) {
        event.preventDefault();

        let taskData = {
            title: $("#taskTitle").val(),
            description: $("#taskDescription").val(),
            taskTypeID: $("#taskTypeDropdown").val(),
            dueDate: $("#dueDate").val(),
            status: $("#taskStatus").val(),
            assignedTo: $("#userDropdown").val(),
            projectID: $("#projectID").val()
        };

        $.ajax({
            url: "https://localhost:7107/api/Task",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(taskData),
            success: function () {
                Swal.fire({
                    icon: 'success',
                    title: 'Task Added',
                    text: 'Task added successfully!',
                    confirmButtonText: 'OK'
                }).then(() => {
                    $('#taskModal').modal('hide');
                    location.reload();
                });
            },
            error: function (error) {
                console.error("Error adding task:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error adding task!'
                });
            }
        });
    });


        $("#milestoneForm").submit(function (event) {
        event.preventDefault();

        let milestoneData = {
            title: $("#milestoneTitle").val(),
            dueDate: $("#milestoneDueDate").val(),
            projectID: $("#projectID").val()
        };

        $.ajax({
            url: "https://localhost:7107/api/Milestones",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(milestoneData),
            success: function () {
                Swal.fire({
                    icon: 'success',
                    title: 'Milestone Added',
                    text: 'Milestone added successfully!',
                    confirmButtonText: 'OK'
                }).then(() => {
                    $('#milestoneModal').modal('hide');
                    location.reload();
                });
            },
            error: function (error) {
                console.error("Error adding milestone:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error adding milestone!'
                });
            }
        });
    });


        $("#projectEditModal").on('show.bs.modal', function (event) {
            var modal = $(this);
            var projectID = $('#projectID').val();

            $.ajax({
                url: `https://localhost:7107/api/Project/${projectID}`,
                type: "GET",
                success: function (data) {
                    if (data) {
                        modal.find('#projectName').val(data.title);
                        modal.find('#description').val(data.description);
                        modal.find('#projectStatusDropdown').val(data.status);
                        modal.find('#startDate').val(data.startDate.split('T')[0]);
                        modal.find('#endDate').val(data.endDate.split('T')[0]);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching project data:", error);
                }
            });
        });

		$("#projectEditForm").submit(function (event) {
			event.preventDefault();
			var projectID = $('#projectID').val();
			let projectData = {
                projectID: projectID,
				title: $("#projectName").val(),
				description: $("#description").val(),
                status: $("#projectStatusDropdown").val(),
				startDate: $("#startDate").val(),
				endDate: $("#endDate").val()
			};
			console.log(projectData);
			$.ajax({
                url: `https://localhost:7107/api/Project/${projectID}`,
				type: "PUT",
				contentType: "application/json",
				data: JSON.stringify(projectData),
				success: async function () {
					await alert("Project updated successfully!");
					$('#projectEditModal').modal('hide');
					location.reload();

				},
				error: function (error) {
					console.error("Error updating project:", error);
					alert("Error updating project!");
				}
			});
		});
    });

    function archiveProject(projectId) {
        Swal.fire({
            title: "Are you sure?",
            text: "Do you want to archive this project?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, archive it!"
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `https://localhost:7107/api/Project/ArchiveProject/${projectId}`,
                    type: "POST",
                    success: function () {
                        Swal.fire("Archived!", "The project has been archived successfully.", "success")
                            .then(() => window.location.href = "/Project/ProjectList");
                    },
                    error: function () {
                        Swal.fire("Error!", "Something went wrong. Try again later.", "error");
                    }
                });
            }
        });
    }

</script>
<style>
    .mdi {
        cursor: pointer !important;
    }
    
    .dropdown-menu {
        min-width: 12px !important;
        padding: 5px;
        font-size: 12px;
    }

    .dropdown-item:hover {
        background-color: #f8f9fa !important;
        color: black !important;
    }
</style>
