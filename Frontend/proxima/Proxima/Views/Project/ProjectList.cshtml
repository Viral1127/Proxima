@{
    ViewBag.Title = "Projects";
}
@model IEnumerable<Proxima.Models.ProjectModel>

<div class="content-wrapper">
    <!-- Page Title & Button -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="page-title">
            <span class="page-title-icon bg-gradient-primary text-white me-2">
                <i class="mdi mdi-folder-file"></i>
            </span>Projects
        </h3>
		@if (User.IsInRole("Admin"))
		{
            <button type="button" class="btn btn-gradient-primary btn-rounded btn-fw" data-bs-toggle="modal" data-bs-target="#createProjectModal" id="createProjectBtn">+ New Project</button>
		}
        
    </div>

    <!-- Skeleton Loader -->
    <div id="skeletonLoader">
        <div class="project-section my-3">
            <div class="d-flex justify-content-between align-items-center my-2">
                <h5 class="font-weight-medium placeholder-glow">
                    <span class="placeholder col-4"></span>
                </h5>
            </div>
            <div class="border rounded shadow-sm bg-white p-3">
                <div class="d-flex align-items-center mt-2">
                    <div style="width:100%;">
                        <table class="table table-hover">
                            <tbody>
                                <!-- Skeleton Rows -->
                                <tr class="placeholder-glow">
                                    <td><span class="placeholder col-6"></span></td>
                                    <td><span class="placeholder col-3"></span></td>
                                </tr>
                                <tr class="placeholder-glow">
                                    <td><span class="placeholder col-6"></span></td>
                                    <td><span class="placeholder col-3"></span></td>
                                </tr>
                                <tr class="placeholder-glow">
                                    <td><span class="placeholder col-6"></span></td>
                                    <td><span class="placeholder col-3"></span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Actual Project List (Hidden Initially) -->
    <div id="projectListContainer" style="display: none;">
        <div class="project-section my-3">
            <div class="d-flex justify-content-between align-items-center my-2">
                <h5 class="font-weight-medium">All Projects</h5>
            </div>
            <div class="border rounded shadow-sm bg-white p-3">
                <div class="d-flex align-items-center mt-2">
                    <div id="projectList" style="width:100%;">
                        <table class="table table-hover">
                            <tbody id="projectTableBody">
                                @foreach (var project in Model.Where(p => p.Status != "Archived" ))
                                {
                                    <tr onclick="location.href='@Url.Action("ProjectDetails", "Project", new { id = project.ProjectID })'" style="cursor: pointer;">
                                        <td>@project.Title</td>
                                        <td>@project.Status</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Archived Section -->
        @if(User.IsInRole("Admin")){
            <div class="my-3">
                <div class="d-flex justify-content-between align-items-center my-2">
                    <h5 class="font-weight-medium">Archived</h5>
                </div>
                <div class="border rounded shadow-sm bg-white p-3 project-section" style="opacity: 0.5;pointer-events: none;">
                    <div class="d-flex align-items-center mt-2">
                        <div id="projectList" style="width:100%;">
                            <table class="table table-hover">
                                <tbody id="archivedTableBody">
                                    @foreach (var project in Model.Where(p => p.Status == "Archived"))
                                    {
                                        <tr onclick="location.href='@Url.Action("ProjectDetails", "Project", new { id = project.ProjectID })'" style="cursor: not-allowed;">
                                            <td>@project.Title</td>
                                            <td>@project.Status</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
       
    </div>
</div>

<div class="modal fade" id="createProjectModal" tabindex="-1" aria-labelledby="createProjectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Create Project</h4>
                    <form class="forms-sample" id="projectForm">
                        <div class="form-group">
                            <label for="exampleInputUsername1">Title</label>
                            <input type="text" class="form-control" id="projectTitle" name="Title" placeholder="Title">
                        </div>
                        <div class="form-group">
                            <label for="startDate">Start Date</label>
                            <input type="date" class="form-control" id="startDateHidden" name="StartDate" style="opacity: 0; position: absolute; pointer-events: none;">
                            <input type="text" class="form-control" id="startDateFormatted" readonly>
                        </div>

                        <div class="form-group">
                            <label for="exampleInputEmail1">Estimated Due Date</label>
                            <input type="text" onclick="(this.type='date')"
                                   onblur="(this.type='text')" class="form-control" id="endDate" name="EndDate" placeholder="Select Due date">
                        </div>
                        <button type="button" class="btn btn-gradient-primary me-2" id="saveProject">Submit</button>
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function() {

        let today = new Date();
        let yyyy = today.getFullYear();
        let mm = String(today.getMonth() + 1).padStart(2, '0');
        let dd = String(today.getDate()).padStart(2, '0');

        let formattedDate = `${dd}/${mm}/${yyyy}`;
        document.getElementById("startDateFormatted").value = formattedDate;
        document.getElementById("startDateHidden").value = `${yyyy}-${mm}-${dd}`;
    });

    setTimeout(function () {
            document.getElementById("skeletonLoader").style.display = "none";
            document.getElementById("projectListContainer").style.display = "block";
        }, 2000);

    document.getElementById("startDateHidden").addEventListener("change", function() {
        let dateParts = this.value.split("-");
        let formattedDate = `${dateParts[2]}/${dateParts[1]}/${dateParts[0]}`;
        document.getElementById("startDateFormatted").value = formattedDate;
    });


    document.getElementById("startDateFormatted").addEventListener("click", function() {
        document.getElementById("startDateHidden").focus();
        document.getElementById("startDateHidden").showPicker();
    });



    $("#saveProject").click(function(event) {
        event.preventDefault();

        const project = {
            Title: $("#projectTitle").val().trim(),
            StartDate: $("#startDateHidden").val(),
            EndDate: $("#endDate").val()
        };

        console.log("Project Data:", project);

        if (!project.Title || !project.StartDate || !project.EndDate) {
            Swal.fire({
                icon: 'warning',
                title: 'Missing Fields',
                text: 'Please enter all fields.'
            });
            return;
        }

        if (new Date(project.EndDate) < new Date(project.StartDate)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Date',
                text: 'End Date cannot be earlier than Start Date.'
            });
            return;
        }

        $.ajax({
            url: '/Project/SaveProject',
            type: 'POST',
            data: JSON.stringify(project),
            contentType: 'application/json',
            success: function (response) {
                Swal.fire({
                    icon: 'success',
                    title: 'Project Created',
                    text: 'Project created successfully!',
                    confirmButtonText: 'OK'
                }).then(() => {
                    var modal = bootstrap.Modal.getInstance(document.getElementById('createProjectModal'));
                    modal.hide();
                    location.reload();
                });
            },
            error: function (xhr) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: xhr.responseText
                });
            }
        });
    });


     $(document).ready(function () {
        var userID = @User.FindFirst("UserID")?.Value;
        let userRole = "@(User.IsInRole("Admin") ? "Admin" : "User")";
        let apiUrl = userRole === "Admin" ? "https://localhost:7107/api/Project" : `https://localhost:7107/api/Project/ProjectsByUserID/${userID}`;
        console.log("api url :" , apiUrl);

        // Fetch Projects
        $.ajax({
            url: apiUrl,
            type: 'GET',
            success: function (projects) {
                $("#skeletonLoader").hide();
                $("#projectListContainer").show();
                populateProjects(projects);
            },
            error: function (xhr) {
                console.error("Error fetching projects:", xhr);
            }
        });

        function populateProjects(projects) {
            let activeProjects = "";
            let archivedProjects = "";

            projects.forEach(project => {
                 let projectUrl = '@Url.Action("ProjectDetails", "Project", new { id = "__ID__" })'.replace("__ID__", project.projectID);
                let row = `<tr onclick="location.href='${projectUrl}'" style="cursor: pointer;">
                              
                               <td>${project.title}</td>
                               <td>${project.status}</td>
                           </tr>`;
                if (project.status != "Archived") {
                    activeProjects += row;
                } else {
                    archivedProjects += row;
                }
            });

            $("#projectTableBody").html(activeProjects);
            $("#archivedTableBody").html(archivedProjects);
        }
    });
</script>
